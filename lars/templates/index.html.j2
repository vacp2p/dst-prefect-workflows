<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LARS - Lab Automated Resource Scheduler</title>
    <link href="/static/output.css" rel="stylesheet">
    {# Include the LiveReload script if provided by Axum layer #}
    {% if live_reload_script is defined %}
        {{ live_reload_script|safe }}
    {% endif %}
</head>
<body class="bg-gray-100 text-gray-800 font-sans">
    <div class="container mx-auto p-6">
        <h1 class="text-4xl font-bold mb-6 text-gray-700">LARS Dashboard</h1>

        <!-- Mock Submission Form -->
        <div class="mb-6 bg-white p-4 rounded-lg shadow">
            <h2 class="text-xl font-semibold mb-3 text-gray-600">Submit Mock Simulations</h2>
            <form id="mock-submit-form" class="flex items-end space-x-3">
                <div>
                    <label for="mock-count" class="block text-sm font-medium text-gray-700">Number to Add:</label>
                    <input type="number" id="mock-count" name="count" value="5" min="1" max="50" class="mt-1 block w-24 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
                <div>
                    <label for="mock-nodes" class="block text-sm font-medium text-gray-700">Base Nodes:</label>
                    <input type="number" id="mock-nodes" name="base_nodes" value="100" min="10" max="1000" step="10" class="mt-1 block w-24 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
                <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Submit</button>
            </form>
             <p id="submit-status" class="text-sm text-gray-500 mt-2"></p>
        </div>

        <!-- Simulation Lists -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
                <h2 class="text-2xl font-semibold mb-3 text-gray-600">Queued Simulations</h2>
                <div id="queued-simulations" class="bg-white p-4 rounded-lg shadow space-y-3 min-h-[100px]">
                    <p class="text-gray-500 italic">Waiting for data...</p>
                </div>
            </div>

            <div>
                <h2 class="text-2xl font-semibold mb-3 text-gray-600">Active Simulations</h2>
                <div id="active-simulations" class="bg-white p-4 rounded-lg shadow space-y-3 min-h-[100px]">
                    <p class="text-gray-500 italic">Waiting for data...</p>
                </div>
            </div>
        </div>

    </div>

    <script>
        const queuedList = document.getElementById('queued-simulations');
        const activeList = document.getElementById('active-simulations');
        const mockForm = document.getElementById('mock-submit-form');
        const submitStatus = document.getElementById('submit-status');

        function formatSim(sim, is_active = false) {
            const cost = is_active ? sim.actual_cost : sim.predicted_cost;
            const pred_cost = sim.predicted_cost;
            const id = is_active ? sim.simulation_id : sim.request_id;

            let costHtml = `CPU: ${cost.cpu_cores.toFixed(2)} cores | Mem: ${cost.memory_gb.toFixed(2)} GB`;
            if (is_active) {
                costHtml += ` <span class="text-xs text-gray-500">(Pred: ${pred_cost.cpu_cores.toFixed(2)} / ${pred_cost.memory_gb.toFixed(2)})</span>`;
            }

            return `
                <div class="border border-gray-200 p-3 rounded bg-gray-50" data-id="${id}">
                    <p class="font-medium text-gray-700">${sim.params.chart} (${sim.params.node_count} nodes, ${sim.params.duration_mins} min)</p>
                    <p class="text-sm text-gray-600">Cost: ${costHtml}</p>
                    <p class="text-xs text-gray-400">ID: ${id}</p>
                </div>
            `;
        }

        function updateList(element, simulations, is_active) {
            if (!element) return;
            if (simulations.length === 0) {
                element.innerHTML = `<p class="text-gray-500 italic">No ${is_active ? 'active' : 'queued'} simulations.</p>`;
                return;
            }
            element.innerHTML = simulations.map(sim => formatSim(sim, is_active)).join('');
        }

        // --- Mock Form Submission ---
        mockForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            submitStatus.textContent = 'Submitting...';
            const formData = new FormData(mockForm);
            const data = {
                count: parseInt(formData.get('count')),
                base_nodes: parseInt(formData.get('base_nodes')),
            };

            try {
                const response = await fetch('/mock_submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });
                if (response.ok) {
                    submitStatus.textContent = `Successfully submitted ${data.count} mock jobs.`;
                    // Clear status after a few seconds
                    setTimeout(() => { submitStatus.textContent = ''; }, 3000);
                } else {
                     submitStatus.textContent = `Error: ${response.statusText}`;
                }
            } catch (error) {
                console.error('Error submitting mock jobs:', error);
                submitStatus.textContent = 'Submission failed.';
            }
        });

        // --- Server-Sent Events --- 
        console.log("Connecting to SSE stream at /status-stream");
        const evtSource = new EventSource("/status-stream");

        evtSource.onmessage = function(event) {
            console.log("SSE message received:", event.data);
            try {
                const message = JSON.parse(event.data);
                if (message.type === 'QueueUpdated') {
                    console.log("Queue Updated:", message.data);
                    updateList(queuedList, message.data, false);
                } else if (message.type === 'ActiveUpdated') {
                    console.log("Active Updated:", message.data);
                    updateList(activeList, message.data, true);
                }
            } catch (e) {
                console.error("Failed to parse SSE message:", e);
            }
        };

        evtSource.onerror = function(err) {
            console.error("EventSource failed:", err);
            queuedList.innerHTML = `<p class="text-red-500 italic">Error connecting to status stream.</p>`;
            activeList.innerHTML = `<p class="text-red-500 italic">Error connecting to status stream.</p>`;
            // Optionally try to reconnect?
            // evtSource.close(); // Close to prevent constant retries if server is down
        };

         evtSource.onopen = function() {
            console.log("SSE connection opened.");
            // Optionally clear any previous error messages
        };

    </script>
</body>
</html> 